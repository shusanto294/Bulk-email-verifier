<!-- User Info and Credits -->
<% if (typeof user !== 'undefined' && user) { %>
    <div class="user-info">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h5 class="mb-1">
                    <i class="fas fa-user me-2"></i><%= user.username %>
                </h5>

                <div class="col-md-6 mb-3">
                    <p class="mb-1"><strong>Email:</strong> <%= user.email %></p>
                    <p class="mb-0"><strong>Member Since:</strong> <%= user.createdAt.toLocaleDateString() %></p>
                </div>

                <a href="/auth/logout">
                    <i class="fas fa-sign-out-alt me-2"></i>Logout
                </a>
            </div>
            <div class="col-md-6 text-end">
                <div class="credit-display">
                    <h4 class="mb-1">
                        <i class="fas fa-coins me-2"></i><%= user.credits %>
                    </h4>
                    <small>Available Credits</small>
                    <div class="mt-2">
                        <a href="/payments/buy-credits" class="btn btn-light btn-sm">
                            <i class="fas fa-plus me-1"></i>Buy More Credits
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
<% } %>



<!-- Statistics Grid -->
<div class="row g-4 mb-4">
    <div class="col-md-3 col-sm-6">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="mb-3">
                    <i class="fas fa-upload fa-2x" style="background: var(--primary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                </div>
                <h3 class="mb-2" style="background: var(--primary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"><%= stats.totalUploads %></h3>
                <p class="text-muted mb-0 text-uppercase small fw-semibold">Total Uploads</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="mb-3">
                    <i class="fas fa-envelope fa-2x" style="background: var(--secondary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                </div>
                <h3 class="mb-2" style="background: var(--secondary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"><%= stats.totalEmails %></h3>
                <p class="text-muted mb-0 text-uppercase small fw-semibold">Total Emails</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="mb-3">
                    <i class="fas fa-check-circle fa-2x" style="background: var(--success-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                </div>
                <h3 class="mb-2" style="background: var(--success-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"><%= stats.verifiedEmails %></h3>
                <p class="text-muted mb-0 text-uppercase small fw-semibold">Verified Emails</p>
            </div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6">
        <div class="card text-center h-100">
            <div class="card-body">
                <div class="mb-3">
                    <i class="fas fa-times-circle fa-2x" style="background: var(--danger-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                </div>
                <h3 class="mb-2" style="background: var(--danger-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"><%= stats.invalidEmails %></h3>
                <p class="text-muted mb-0 text-uppercase small fw-semibold">Invalid Emails</p>
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="card mb-4">
    <div class="card-body">
        <h3 class="mb-4">
            <i class="fas fa-bolt me-2"></i>Quick Actions
        </h3>
        <div class="text-center">
            <a href="/upload" class="btn btn-primary btn-lg me-3">
                <i class="fas fa-upload me-2"></i>Upload New File
            </a>
            <a href="/upload" class="btn btn-success btn-lg">
                <i class="fas fa-list me-2"></i>View All Uploads
            </a>
        </div>
    </div>
</div>

<!-- Recent Transactions and Saved Payment Methods -->
<div class="row g-4 mb-4">
    <!-- Recent Transactions -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-body">
                <h5 class="mb-4">
                    <i class="fas fa-credit-card me-2"></i>Recent Transactions
                </h5>
                <% if (recentPayments && recentPayments.length > 0) { %>
                    <div class="list-group list-group-flush">
                        <% recentPayments.forEach(payment => { %>
                            <div class="list-group-item px-0 border-0">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <div class="fw-semibold">
                                            <% if (payment.status === 'confirmed') { %>
                                                <i class="fas fa-check-circle text-success me-2"></i>
                                            <% } else if (payment.status === 'pending') { %>
                                                <i class="fas fa-clock text-warning me-2"></i>
                                            <% } else { %>
                                                <i class="fas fa-times-circle text-danger me-2"></i>
                                            <% } %>
                                            <%= payment.credits %> Credits
                                        </div>
                                        <small class="text-muted">
                                            <%= payment.createdAt.toLocaleDateString() %> • 
                                            <span class="text-capitalize"><%= payment.status %></span>
                                        </small>
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-bold text-success">$<%= payment.amount %></div>
                                        <small class="text-muted"><%= payment.paymentMethod %></small>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    <div class="text-center mt-3">
                        <a href="/payments/history" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-list me-1"></i>View All Transactions
                        </a>
                    </div>
                <% } else { %>
                    <div class="text-center py-4">
                        <i class="fas fa-receipt fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No transactions yet</p>
                        <a href="/payments/buy-credits" class="btn btn-primary btn-sm">
                            <i class="fas fa-plus me-1"></i>Buy Credits
                        </a>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Saved Payment Methods -->
    <div class="col-lg-6">
        <div class="card h-100">
            <div class="card-body">
                <h5 class="mb-4">
                    <i class="fas fa-bookmark me-2"></i>Saved Payment Methods
                </h5>
                <% if (savedPaymentMethods && savedPaymentMethods.length > 0) { %>
                    <div class="list-group list-group-flush">
                        <% savedPaymentMethods.forEach(method => { %>
                            <div class="list-group-item px-0 border-0">
                                <div class="d-flex align-items-center">
                                    <div class="me-3">
                                        <% if (method.type === 'card') { %>
                                            <i class="fas fa-credit-card fa-lg text-primary"></i>
                                        <% } else if (method.type === 'paypal') { %>
                                            <i class="fab fa-paypal fa-lg text-primary"></i>
                                        <% } else { %>
                                            <i class="fas fa-university fa-lg text-primary"></i>
                                        <% } %>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="fw-semibold">
                                            <% if (method.type === 'card') { %>
                                                **** **** **** <%= method.details.last4 %>
                                            <% } else if (method.type === 'paypal') { %>
                                                <%= method.details.email %>
                                            <% } else { %>
                                                <%= method.details.bankName %>
                                            <% } %>
                                            <% if (method.isDefault) { %>
                                                <span class="badge bg-success ms-2">Default</span>
                                            <% } %>
                                        </div>
                                        <small class="text-muted">
                                            <% if (method.type === 'card') { %>
                                                <%= method.details.brand ? method.details.brand.toUpperCase() : 'Card' %>
                                                <% if (method.details.expiryMonth && method.details.expiryYear) { %>
                                                    • Expires <%= method.details.expiryMonth %>/<%= method.details.expiryYear %>
                                                <% } %>
                                            <% } else { %>
                                                <%= method.type === 'paypal' ? 'PayPal Account' : 'Bank Transfer' %>
                                            <% } %>
                                        </small>
                                    </div>
                                    <div class="ms-2">
                                        <div class="btn-group-vertical" role="group">
                                            <button type="button" class="btn btn-outline-primary btn-sm edit-payment-method" 
                                                    data-method-id="<%= method._id || method.id %>" 
                                                    data-bs-toggle="tooltip" 
                                                    title="Edit payment method">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button type="button" class="btn btn-outline-danger btn-sm delete-payment-method" 
                                                    data-method-id="<%= method._id || method.id %>" 
                                                    data-bs-toggle="tooltip" 
                                                    title="Delete payment method">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    <div class="text-center mt-3">
                        <button class="btn btn-outline-primary btn-sm me-2" onclick="addPaymentMethod()">
                            <i class="fas fa-plus me-1"></i>Add Payment Method
                        </button>
                        <a href="/payments/buy-credits" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-shopping-cart me-1"></i>Buy Credits
                        </a>
                    </div>
                <% } else { %>
                    <div class="text-center py-4">
                        <i class="fas fa-bookmark fa-3x text-muted mb-3"></i>
                        <p class="text-muted">No saved payment methods</p>
                        <button class="btn btn-primary btn-sm me-2" onclick="addPaymentMethod()">
                            <i class="fas fa-plus me-1"></i>Add Payment Method
                        </button>
                        <a href="/payments/buy-credits" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-shopping-cart me-1"></i>Buy Credits
                        </a>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Recent Uploads -->
<div class="card">
    <div class="card-body">
        <h3 class="mb-4">
            <i class="fas fa-history me-2"></i>Recent Uploads
        </h3>
        <% if (uploads.length > 0) { %>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Filename</th>
                            <th>Upload Date</th>
                            <th>Emails</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% uploads.forEach(upload => { %>
                            <tr>
                                <td>
                                    <i class="fas fa-file-csv me-2" style="color: #667eea;"></i>
                                    <%= upload.filename %>
                                </td>
                                <td><%= upload.createdAt.toLocaleString() %></td>
                                <td>
                                    <span class="badge bg-secondary"><%= upload.totalCount || 0 %></span>
                                </td>
                                <td>
                                    <% if (upload.displayStatus === 'Pending') { %>
                                        <span class="status-badge pending">
                                            <i class="fas fa-clock me-1"></i>
                                            <%= upload.displayStatus %>
                                            <% if (upload.pendingCount > 0) { %>
                                                <span class="badge bg-warning ms-1"><%= upload.pendingCount %></span>
                                            <% } %>
                                        </span>
                                    <% } else if (upload.displayStatus === 'Processed') { %>
                                        <span class="status-badge verified">
                                            <i class="fas fa-check me-1"></i>
                                            <%= upload.displayStatus %>
                                        </span>
                                    <% } else { %>
                                        <span class="status-badge invalid">
                                            <i class="fas fa-exclamation me-1"></i>
                                            <%= upload.displayStatus %>
                                        </span>
                                    <% } %>
                                </td>
                                <td>
                                    <a href="/upload/<%= upload._id %>" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye me-1"></i>View
                                    </a>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            <div class="text-center mt-4">
                <a href="/upload" class="btn btn-outline-primary">
                    <i class="fas fa-list me-2"></i>View All Uploads
                </a>
            </div>
        <% } else { %>
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="fas fa-inbox fa-4x" style="background: var(--primary-gradient); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                </div>
                <h5 class="text-muted mb-3">No uploads yet</h5>
                <p class="text-muted mb-4">Start by uploading your first CSV file to verify email addresses.</p>
                <a href="/upload" class="btn btn-primary btn-lg">
                    <i class="fas fa-upload me-2"></i>Upload Your First File
                </a>
            </div>
        <% } %>
    </div>
</div>

<script src="https://cdn.paddle.com/paddle/v2/paddle.js"></script>
<script>
// Global variables for Paddle
let paddleInitialized = false;
let retryCount = 0;
const MAX_RETRIES = 3;

document.addEventListener('DOMContentLoaded', function() {
    // Initialize Paddle
    initializePaddle();
    
    // Handle edit payment method button clicks
    document.querySelectorAll('.edit-payment-method').forEach(button => {
        button.addEventListener('click', function() {
            const methodId = this.getAttribute('data-method-id');
            editPaymentMethod(methodId);
        });
    });

    // Handle delete payment method button clicks
    document.querySelectorAll('.delete-payment-method').forEach(button => {
        button.addEventListener('click', function() {
            const methodId = this.getAttribute('data-method-id');
            deletePaymentMethod(methodId);
        });
    });
});

function editPaymentMethod(methodId) {
    // Set this payment method as default
    if (confirm('Set this payment method as default?')) {
        fetch(`/payments/saved-methods/${methodId}/default`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Payment method set as default successfully!');
                window.location.reload();
            } else {
                alert('Error setting payment method as default: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error setting payment method as default');
        });
    }
}

function deletePaymentMethod(methodId) {
    if (confirm('Are you sure you want to delete this payment method?')) {
        fetch(`/payments/saved-methods/${methodId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Payment method deleted successfully!');
                window.location.reload();
            } else {
                alert('Error deleting payment method: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error deleting payment method');
        });
    }
}

// Initialize Paddle
function initializePaddle() {
    try {
        console.log('Initializing Paddle...');
        
        // Check if Paddle script is loaded
        if (typeof Paddle === 'undefined') {
            if (retryCount < MAX_RETRIES) {
                console.warn(`Paddle not loaded yet, retrying... (${retryCount + 1}/${MAX_RETRIES})`);
                retryCount++;
                setTimeout(initializePaddle, 1000);
                return;
            }
            throw new Error('Paddle script failed to load');
        }

        const sellerIdString = '<%= process.env.PADDLE_VENDOR_ID %>';
        const sellerId = parseInt(sellerIdString, 10);
        if (isNaN(sellerId) || !sellerIdString) {
            throw new Error('Paddle seller ID not configured or is not a valid integer');
        }

        const isProduction = '<%= process.env.NODE_ENV %>' === 'production';
        const forceSandbox = '<%= process.env.PADDLE_SANDBOX %>' === 'true';
        const environment = (isProduction && !forceSandbox) ? 'production' : 'sandbox';

        // Set environment first for Paddle Billing
        Paddle.Environment.set('sandbox');

        // Initialize Paddle Billing
        Paddle.Initialize({
            seller: sellerId,
            eventCallback: function(data) {
                console.log('Paddle event:', data);
                
                if (data.name === 'checkout.completed') {
                    console.log('Payment method setup completed');
                    
                    // Extract payment method data from checkout
                    const transactionId = data.data?.transaction_id || data.data?.id || 'unknown';
                    const customData = data.data?.custom_data;
                    const userId = customData?.user_id;
                    const isSetupOnly = customData?.setup_only;
                    
                    if (isSetupOnly) {
                        // This is a payment method setup transaction
                        console.log('Processing payment method setup transaction:', transactionId);
                        
                        // Process the webhook to add credits (since we charged for setup)
                        const webhookPayload = {
                            event_type: 'transaction.completed',
                            data: {
                                id: transactionId,
                                details: {
                                    totals: {
                                        total: 1000 // $10 in cents
                                    }
                                },
                                totals: {
                                    total: 1000 // Fallback
                                },
                                custom_data: {
                                    user_id: userId,
                                    package_type: '10k',
                                    setup_transaction: true
                                }
                            }
                        };

                        // Process webhook to add credits
                        fetch('/payments/webhook', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(webhookPayload)
                        }).then(response => response.json())
                        .then(result => {
                            console.log('Credits added for setup transaction:', result);
                        }).catch(error => {
                            console.error('Failed to add credits for setup transaction:', error);
                        });
                    }
                    
                    // Save payment method information
                    savePaymentMethodFromCheckout(data).then(() => {
                        if (isSetupOnly) {
                            alert('Payment method added successfully! 10,000 credits have been added to your account.');
                        } else {
                            alert('Payment method added successfully!');
                        }
                        window.location.reload();
                    }).catch(error => {
                        console.error('Failed to save payment method:', error);
                        alert('Payment method added but failed to save details. Please refresh the page.');
                        window.location.reload();
                    });
                }
                
                if (data.name === 'checkout.error') {
                    console.error('Checkout error:', data);
                    alert('Failed to add payment method. Please try again.');
                }
                
                if (data.name === 'checkout.closed') {
                    console.log('Checkout closed by user');
                }
            }
        });

        paddleInitialized = true;
        console.log('✅ Paddle initialized successfully');

    } catch (error) {
        console.error('❌ Failed to initialize Paddle:', error);
        alert('Payment system initialization failed. Please refresh the page and try again.');
    }
}

// Add payment method function
async function addPaymentMethod() {
    try {
        console.log('🔒 Adding new payment method...');
        
        // Check if Paddle is initialized
        if (!paddleInitialized) {
            alert('Payment system is not initialized. Please refresh the page and try again.');
            return;
        }

        // Show confirmation message
        if (!confirm('This will process a small transaction to setup your payment method. The amount will be added to your account as credits. Continue?')) {
            return;
        }

        // Create payment method setup session
        const response = await fetch('/payments/create-payment-method-setup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error('Failed to create payment method setup session');
        }

        const result = await response.json();
        
        if (!result.success) {
            throw new Error(result.error || 'Failed to create payment method setup session');
        }

        console.log('Opening Paddle checkout for payment method setup...');
        
        // Show loading state
        const addButtons = document.querySelectorAll('button[onclick="addPaymentMethod()"]');
        addButtons.forEach(btn => {
            btn.disabled = true;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
        });
        
        // Open Paddle checkout for payment method setup
        const checkoutData = {
            items: [
                {
                    priceId: result.productId,
                    quantity: 1
                }
            ],
            customData: {
                user_id: '<%= user._id %>',
                setup_only: true,
                setup_id: result.setupId
            },
            customer: {
                email: '<%= user.email %>'
            }
        };
        
        Paddle.Checkout.open(checkoutData);
        
        // Reset button state after a delay
        setTimeout(() => {
            addButtons.forEach(btn => {
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-plus me-1"></i>Add Payment Method';
            });
        }, 3000);
        
    } catch (error) {
        console.error('❌ Error adding payment method:', error);
        alert('Failed to add payment method: ' + error.message);
        
        // Reset button state on error
        const addButtons = document.querySelectorAll('button[onclick="addPaymentMethod()"]');
        addButtons.forEach(btn => {
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-plus me-1"></i>Add Payment Method';
        });
    }
}

// Save payment method from checkout data
async function savePaymentMethodFromCheckout(checkoutData) {
    try {
        console.log('🔍 Saving payment method from checkout data:', checkoutData);
        
        const paymentMethod = checkoutData.data?.payment_method;
        const customerId = checkoutData.data?.customer_id || checkoutData.data?.customer?.id;
        const transactionId = checkoutData.data?.transaction_id || checkoutData.data?.id;
        
        if (!customerId) {
            console.log('❌ No customer ID found, cannot save payment method');
            return;
        }
        
        // Create payment method data
        let paymentMethodData = {
            customerId: customerId,
            paymentMethodId: paymentMethod?.id || transactionId,
            type: paymentMethod?.type || 'card'
        };

        // Extract details based on payment method type
        if (paymentMethod?.type === 'card') {
            paymentMethodData.details = {
                last4: paymentMethod.card?.last_four || '****',
                brand: paymentMethod.card?.brand || 'card',
                expiryMonth: paymentMethod.card?.expiry_month,
                expiryYear: paymentMethod.card?.expiry_year
            };
        } else if (paymentMethod?.type === 'paypal') {
            paymentMethodData.details = {
                email: paymentMethod.paypal?.email || '<%= user.email %>'
            };
        } else {
            // Generic payment method
            paymentMethodData.details = {
                last4: '****',
                brand: 'card'
            };
        }

        // Send to backend to save
        const response = await fetch('/payments/save-method', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(paymentMethodData)
        });

        const result = await response.json();
        console.log('💾 Payment method save result:', result);
        
        if (!result.success) {
            throw new Error(result.error || 'Failed to save payment method');
        }
        
        return result;
        
    } catch (error) {
        console.error('Error saving payment method:', error);
        throw error;
    }
}
</script> 