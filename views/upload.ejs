<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bulk Email Verifier</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 1000px; margin: 0 auto; padding: 20px; }
        .upload-form { background: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 30px; }
        .upload-list { margin-top: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        .status-badge { padding: 5px 10px; border-radius: 3px; font-size: 12px; }
        .pending { 
            background: #fff3cd; 
            color: #856404;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .verified { 
            background: #d4edda; 
            color: #155724;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .invalid { 
            background: #e2e3e5; 
            color: #383d41;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        .progress-container { margin-top: 10px; display: none; }
        .progress-bar { height: 20px; background: #e0e0e0; border-radius: 10px; overflow: hidden; }
        .progress { height: 100%; background: #4CAF50; width: 0%; transition: width 0.3s; }
        .progress-text { margin-top: 5px; font-size: 14px; }
    </style>
</head>
<body>
    <a href="/"><h1>Bulk Email Verifier</h1></a>
    
    <div class="upload-form">
        <h2>Upload CSV File</h2>
        <form id="uploadForm">
            <input type="file" id="csvFile" accept=".csv" required>
            <button type="submit">Upload</button>
        </form>
        <div class="progress-container" id="progressContainer">
            <div class="progress-bar">
                <div class="progress" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">Processing: 0%</div>
        </div>
    </div>

    <div class="upload-list">
        <h2>Previous Uploads</h2>
        <% if (uploads.length > 0) { %>
            <table>
                <thead>
                    <tr>
                        <th>Filename</th>
                        <th>Upload Date</th>
                        <th>Emails</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% uploads.forEach(upload => { %>
                        <tr>
                            <td><%= upload.filename %></td>
                            <td><%= upload.createdAt.toLocaleString() %></td>
                            <td><%= upload.totalCount || 0 %></td>
                            <td>
                                <% if (upload.displayStatus === 'Pending') { %>
                                    <span class="status-badge pending" title="<%= upload.pendingCount %> pending">
                                        <%= upload.displayStatus %>
                                        <% if (upload.pendingCount > 0) { %>
                                            <span>(<%= upload.pendingCount %>)</span>
                                        <% } %>
                                    </span>
                                <% } else if (upload.displayStatus === 'Processed') { %>
                                    <span class="status-badge verified" title="All emails processed">
                                        <%= upload.displayStatus %>
                                    </span>
                                <% } else { %>
                                    <span class="status-badge invalid" title="No emails found">
                                        <%= upload.displayStatus %>
                                    </span>
                                <% } %>
                            </td>
                            <td>
                                <a href="/upload/<%= upload._id %>">View Details</a>
                                <button class="delete-btn" data-id="<%= upload._id %>" style="margin-left: 10px; color: red; background: none; border: none; cursor: pointer;">Delete</button>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        <% } else { %>
            <p>No uploads yet. Upload a CSV file to get started.</p>
        <% } %>
    </div>

    <script>
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const file = document.getElementById('csvFile').files[0];
            if (!file) return;

            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');

            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            progressText.textContent = 'Processing: 0%';

            // Upload file to server
            const formData = new FormData();
            formData.append('csvFile', file);
            
            const uploadResponse = await fetch('/upload/upload-file', {
                method: 'POST',
                body: formData
            });

            const upload = await uploadResponse.json();
            if (!upload._id) {
                alert('Error creating upload record');
                return;
            }

            // Process CSV in chunks
            const reader = new FileReader();
            reader.onload = async (event) => {
                try {
                    const text = event.target.result;
                    const lines = text.split('\n').filter(line => line.trim());
                    if (lines.length < 2) {
                        throw new Error('CSV file is empty or has no data rows');
                    }

                    const headers = lines[0].split(',').map(h => h.trim().toLowerCase());
                    const emailIndex = headers.findIndex(h => h === 'email');
                    
                    if (emailIndex === -1) {
                        throw new Error('CSV must contain an "email" column');
                    }

                    // Validate at least one email exists
                    const hasEmails = lines.slice(1).some(line => {
                        const values = line.split(',');
                        return values[emailIndex] && values[emailIndex].trim();
                    });
                    if (!hasEmails) {
                        throw new Error('No email addresses found in CSV file');
                    }

                const batchSize = 500;
                const totalEmails = lines.length - 1;
                let processed = 0;

                for (let i = 1; i < lines.length; i += batchSize) {
                    const batch = lines.slice(i, i + batchSize);
                    const emails = batch.map(line => {
                        const values = line.split(',');
                        return values[emailIndex].trim();
                    }).filter(email => email);

                    try {
                        await fetch(`/api/uploads/${upload._id}/emails`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ emails })
                        });

                        processed += emails.length;
                        const progress = Math.round((processed / totalEmails) * 100);
                        progressBar.style.width = `${progress}%`;
                        progressText.textContent = `Processing: ${progress}% (${processed}/${totalEmails} emails)`;
                    } catch (err) {
                        console.error(err);
                        alert('Error processing batch');
                        return;
                    }
                }

                // Mark upload as complete
                await fetch(`/upload/${upload._id}/complete`, { method: 'POST' });
                progressText.textContent = 'Processing complete! Page will refresh...';
                setTimeout(() => location.reload(), 2000);
            } catch (err) {
                console.error(err);
                progressText.textContent = `Error: ${err.message}`;
                progressBar.style.backgroundColor = '#f44336';
            }
            };

            reader.readAsText(file);
        });

        // Delete functionality
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                if (confirm('Are you sure you want to delete this upload and all its emails?')) {
                    const uploadId = e.target.getAttribute('data-id');
                    try {
                        const response = await fetch(`/api/uploads/${uploadId}`, {
                            method: 'DELETE'
                        });
                        if (response.ok) {
                            e.target.closest('tr').remove();
                        } else {
                            alert('Failed to delete upload');
                        }
                    } catch (err) {
                        console.error(err);
                        alert('Error deleting upload');
                    }
                }
            });
        });
    </script>
</body>
</html>